<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="pos" type="vec3" state="POSITION" />
	<param name="nor" type="vec3" state="NORMAL" />
	<param name="uv"  type="vec2" state="TEXCOORD" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="invP" type="mat4" state="PROJECTION_MATRIX" transform="INVERSE" />
	<param name="M"   type="mat4" state="WORLD_MATRIX" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
	<language name="glsl" version="1.5">
		<bind param="pos" program="vp" />
		<bind param="nor" program="vp" />
		<bind param="uv"  program="vp" />
		<bind param="MVP" program="vp" />
		<bind param="invP" program="fp" />
		<bind param="M"   program="vp" />
		<bind param="viewPort" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MVP, M;
in vec3 pos, nor;
in vec2 uv;

out jit_PerVertex {
	smooth vec3 nor;
	smooth vec3 pos;
	smooth vec2 uv;
	smooth vec4 screenPos;
} jit_out;

void main() {	
	gl_Position = MVP * vec4(pos, 1.);	
	jit_out.nor = ( M * vec4(nor, 0.)).xyz;
	jit_out.pos = ( M * vec4(pos, 1.)).xyz;
	jit_out.uv  = uv;
	jit_out.screenPos = MVP * vec4(pos, 1.);
}
]]>
		</program>

		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

uniform mat4 invP;
uniform vec2 viewPort;

in jit_PerVertex {
	smooth vec3 nor;
	smooth vec3 pos;
	smooth vec2 uv;
	smooth vec4 screenPos;
} jit_in;

layout (location = 0) out vec4 pos;
layout (location = 1) out vec4 nor;
layout (location = 2) out vec4 uv;

void main() {
	pos = vec4(jit_in.pos, 1.);
	nor = vec4(jit_in.nor, 1.);
	uv  = vec4(jit_in.uv, 0., 1.);
}	
]]>
		</program>
	</language>
</jittershader>
